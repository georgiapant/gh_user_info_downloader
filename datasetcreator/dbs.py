
class Databases():

    def keywords_db(self):
        # project_words = ["plan","timeline","project", "sprint", "risk", "resources", "agile" , "progress", "cost", "planning", "budget", "analysis", \
        # "business model" , "value", "communication", "task", "task manager", "complete", "constraint", "stakeholders", "customer", "critical success factor", \
        # "KPI", "effort", "impact", "XP", "goal setting", "goal" , "HR", "waterfall"]
        
        project_words = ["acceptance test driven development ","acceptance testing","agile","agile development practices","agile manifesto","agile methodology","agile project management","agile software development","ALAP","alignment","analysis","antipattern","application lifecycle management (alm)","ASAP","assumption","automated build","backlog","backlog grooming","backlog item","backlog item effort","balanced scorecard","baseline","BDD","behavior driven development","big visible charts","boscard","bottleneck","branching","breaking the build","budget","bugs","build","build – measure – learn","build process","burndown chart","burnup chart","business agility","business case","business model","business value","CAPEX","CAPM","certified scrummaster","change control","charter","chicken","client","code smell","collective ownership","colocation","communication","complete","constraint","constraints","continuous deployment","continuous integration","cost","cost benefit analysis","cost variance","crc cards","critical chain project management (ccpm)","critical path","critical path method (cpm)","critical success factor","cross-functional team","customer","customer development","daily meeting","daily standup","definition of done","definition of ready","deliverable","delphi technique","dependency","design pattern","distributed development team","domain model","done","duration","earned value","effort","emergence","empiricism","epic","estimating","estimation","executive sponsor","exploratory testing ","extreme programming","extreme programming ","facilitation","fail-fast","feature","feature creep","fibonacci sequence","float","flow","frequent releases","functional manager","gantt chart","given when then","goal","goal setting","heartbeat retrospective","HR","impact","impediment","incremental development","information radiators","inspect and adapt","integration","INVEST","issue","iteration","iterative development","kanban","kanban board","KPI","lead time","lean","lean software development","learn","lifecycle","link","logic network","measure","milestone","milestone retrospective","minimum marketable feature ","minimum marketable features","minimum viable product","MMF","mob programming","mock objects","monte carlo simulation","moscow","murphy’s law","MVP","niko-niko calendar","NPV","objective","P3M3","pair programming","parallel development","pareto principle","personas","pert chart","pest analysis","pig","pirate metrics","plan","planning","planning game","planning poker","PMBOK","PMP","points","portfolio management","product","product backlog","product owner","product vision","program","program manager","progress","project","project baseline","project chartering","project definition","project management","project management office","project manager","project phase","project plan","project schedule","project sponsor","project team","quick design session","raci chart","raid log","reason","refactoring","refactoring ","relative estimation","release","release plan","release planning","request for proposal","request for quotation","requirements","resources","retrospective","risk","risk management","role","role-feature-reason","rule of simplicity","schedule","schedule variance","scope","scope change management","scope creep","scrum","scrum master","scrum of scrums","scrum-ban","self-organization","sign up for tasks","simple design","six sigma","SOW","spike","sponsor","sprint","sprint backlog","sprint planning","sprint planning meeting","sprint review","stakeholder","stakeholders","standup meeting","statement of work ","steering committee","story ","story mapping","story points","story splitting","storyboard","student syndrome","sustainable pace","swot analysis","task","task board","task manager","TCO","TDD","team","team room","technical debt","test automation","test driven development","test driven development ","theory of constraints ","three amigos","three c's ","three questions","time-boxing","timebox","timeline","TOC","ubiquitous language","unit testing","usability testing","use case","user persona","user stories","user story","value","vanity metric","velocity","version control","vertical slice","VOC","voice of the customer","waterfall","waterfall methodology","waterfall model","wiki","WIP","work breakdown structure","work in progress ","work schedule","workplan","XP"]

        bug_words = ["bug", "error","defect","debug", "faulty", "problem", "trial", "try", "tried","solve", "solution", "fix", "fixed", "issue", \
        "wrong", "mistake", "issues", "debugging"]
        # test_words = ["test", "defect", "test case", "testing", "expected result", "fault", "fault injection", "maintenance"\
        # "quality", "QA", "quality assurance", "re-testing", "risk", "scenario", "tpi"]

        test_words=["bug","trial","try","tried", "solved", "solution","debug","fix", "fixed","issue","wrong", "mistake", "issues", "debugging","faulty","abuse case","acceptance criteria","acceptance testing","accessibility","accessibility testing","account harvesting","accuracy testing","acting (IDEAL)","ad hoc reviewing","adaptability","Agile Manifesto","Agile software development","Agile testing","alpha testing","analytical test strategy","analyzability","anomaly","anti-malware","anti-pattern","API testing","assessment report","assessor","atomic condition","attack vector","attacker","attractiveness","audit","authentication","authorization","automation code defect density","automotive safety integrity level","automotive SPICE","availability","back-to-back-testing","balanced scorecard","beta testing","black-box test technique","black-box testing","botnet","boundary value analysis","build verification test","Capability Maturity Model Integration","capture/playback","capture/playback tool","cause-effect diagram","cause-effect graph","cause-effect graphing","change management","changeability","checklist-based reviewing","checklist-based testing","classification tree method","CLI testing","closed-loop-system","co-existence","code coverage","codependent behavior","coding standard","combinatorial testing","commercial off-the-shelf","compiler","complexity","component integration testing","component testing","computer forensics","concurrency","condition testing","confidence interval","configuration item","configuration management","configuration management tool","confirmation testing","consultative test strategy","content-based model","context of use","continuous representation","contractual acceptance testing","control chart","control flow","control flow analysis","control flow testing","convergence metric","corporate dashboard","coverage","coverage item","coverage tool","critical success factor","Critical Testing Processes","cross-site scripting","custom tool","cyclomatic complexity","dashboard","data flow","data flow analysis","data obfuscation","data privacy","data-driven testing","debugging","debugging tool","decision condition testing","decision coverage","decision table testing","defect","defect density","Defect Detection Percentage","defect management","defect management committee","defect taxonomy","defect-based test design technique","definition-use pair","demilitarized zone","Deming cycle","denial of service","diagnosing (IDEAL)","domain analysis","driver","dynamic analysis","dynamic analysis tool","dynamic testing","effectiveness","efficiency","emotional intelligence","encryption","endurance testing","entry criteria","environment model","equivalence partitioning","equivalent manual test effort","error","error guessing","establishing (IDEAL)","ethical hacker","European Foundation for Quality Management excellence model","exhaustive testing","exit criteria","experience-based test technique","expert usability review","exploratory testing","Extreme Programming","failure","Failure Mode and Effect Analysis","failure rate","false-negative result","false-positive result","fault attack","fault injection","fault seeding tool","Fault Tree Analysis","feature-driven development","finding","firewall","formal review","formative evaluation","functional requirement","functional safety","functional testing","fuzz testing","generic test automation architecture","Goal Question Metric","GUI testing","hacker","hardware in the loop","hashing","heuristic","heuristic eavaluation","high-level test case","human-centered design","hyperlink test tool","IDEAL","impact analysis","incident","incident management","incident management tool","incident report","incremental development model","independence of testing","indicator","informal review","information assurance","information security","initiating (IDEAL)","insider threat","inspection","installability","integration","integration testing","interoperability testing","intrusion detection system","iterative development model","keyword-driven testing","lead assessor","learnability","learning (IDEAL)","level of intrusion","level test plan","lifecycle model","linear scripting","load generation","load testing","low-level test case","maintainability testing","maintenance","maintenance testing","malware","malware scanning","management review","manufacturing-based quality","master test plan","maturity","maturity level","MBT model","measure","measurement","memory leak","method table","methodical test strategy","metric","model coverage","model in the loop","model-based test strategy","model-based testing","modeling tool","moderator","modified condition / decision testing","monitoring tool","multiple condition testing","Myers-Briggs Type Indicator","neighborhood integration testing","network zone","non-functional requirement","non-functional testing","offline MBT","online MBT","open source tool","open–loop-system","operability","operational acceptance testing","operational profile","operational profiling","orthogonal array","orthogonal array testing","pairwise integration testing","pairwise testing","Pareto analysis","password cracking","path testing","peer review","penetration testing","performance testing","performance testing tool","perspective-based reading","pharming","phase containment","phishing","planning poker","portability testing","priority","probe effect","process assessment","process model","process-compliant test strategy","process-driven scripting","product risk","product-based quality","project retrospective","project risk","quality","quality assurance","quality risk","RACI matrix","Rational Unified Process","reactive test strategy","reconnaissance","recoverability testing","regression testing","regression-averse test strategy","regulatory acceptance testing","reliability growth model","reliability testing","replaceability","requirement","requirements management tool","requirements-based testing","resource utilization testing","retrospective meeting","review","review plan","review tool","reviewer","risk","risk analysis","risk assessment","risk identification","risk level","risk management","risk mitigation","risk-based testing","robustness","robustness testing","role-based reviewing","root cause","root cause analysis","S.M.A.R.T. goal methodology","salting","scalability testing","scenario-based reviewing","scribe","script kiddie","scrum","security attack","security audit","security policy","security procedure","security testing","security tool","security vulnerability","sequential development model","severity","short-circuiting","social engineering","software in the loop","software lifecycle","software process improvement","software qualification test","Software Usability Measurement Inventory","spike testing","stability","staged representation","standard","standard-compliant test strategy","state transition testing","statement coverage","statement testing","static analysis","static analyzer","static testing","stress testing","stress testing tool","structured scripting","stub","suitability testing","summative evaluation","system hardening","System Integration Testing","system qualification test","system testing","system under test","System Usability Scale","Systematic Test and Evaluation Process","technical review","test","test adaptation layer","test analysis","test approach","test architect","test automation","test automation architecture","test automation framework","test automation manager","test automation solution","test automation strategy","test basis","test case","test case explosion","test case specification","test charter","test closure","test comparator","test completion","test condition","test control","test data","test data preparation tool","test definition layer","test design","test technique","test design tool","test director","test environment","test estimation","test execution","test execution automation","test execution layer","test execution schedule","test execution tool","test generation layer","test harness","test hook","test implementation","test improvement plan","test level","test log","test logging","test management","test management tool","test manager","Test Maturity Model integration","test mission","test model","test monitoring","test object","test objective","test oracle","test plan","test planning","test policy","test procedure","test procedure specification","test process","test process group","test process improvement manifesto","test process improver","test progress report","test reporting","test script","test selection criteria","test strategy","test suite","test summary report","test tool","test type","test-driven development","testability","tester","testing","testware","think aloud usability testing","Total Quality Management","TPI Next","traceability","traceability matrix","transactional analysis","transcendent-based quality","understandability","unit test framework","usability","usability evaluation","usability requirement","usability test participant","usability test script","usability test session","usability test task","usability testing","use case testing","user acceptance testing","user experience","user interface","user interface guideline","user story","user story testing","user survey","user-based quality","V-model","validation","value-based quality","verification","vulnerability scanner","walkthrough","Web Content Accessibility Guidelines","Website Analysis and Measurement Inventory","white-box test technique","white-box testing","Wideband Delphi","wild pointer", "QA", "re-testing", "scenario","problem" ]
        test_filenames = ["/test/", "/tests/"]
        operational = ["md", "txt", "LICENSE", "pdf", "doc", "docx", "license", "document", "documentation"]

        return project_words, bug_words, test_words, test_filenames, operational

    def languages_db(self,file_endings):
        '''
        This function acts like a database of file extensions and the programming language they correspond

        :file_endings: The file ending we want to find the corresponding language
        The output is a string of the corresponding language
        '''

        # db = [("js", "JavaScript"), ("py", "Python"), ("css", "CSS"), ("json", "JSON"), ("md", "Markdown"), \
        # ("java", "Java"), ("c","C"),("cpp", "C++"),("m", "Objective-C"), ("glsl", "GLSL"), ("lua", "Lua"),("sh","Shell"),\
        # ("php","PHP"),("awk","Awk"),("rb","Ruby"),("coffee","CoffeeScript"),("mm","Objective-C++"),("py","Python"),("tpl","Smarty"),\
        # ("PSM1","PowerShell"),("qml","QML") ,("cs","C#"),("r","R"),("vim","VimL"),("go","Go"),("pl","Perl"),("tex","Tex"),
        # ("swift","Swift"),("scala","Scala"),("lisp","Emacs Lisp"),("hs","Haskell"),("clj","Clojure"), ("pde","Arduino"),
        # ("mk","Makefile"),("groovy","Groovy"),("pp","Puppet"), ("rs","Rust"),("ts","TypeScript"),("ipynb","Jupyter Notebook"),\
        # ("kt","Kotlin"),("xml","XML"), ("yml","YML")] 

        db= [("pde","Arduino"),("asm","Assembly"),("awk","Awk"),("c","C"),("cs","C#"),("cpp","C++"),("clj","Clojure"),("coffee","CoffeeScript"),("css","CSS"),("lisp","Emacs Lisp"),("erl","Erlang"),("fs","F#"),("glsl","GLSL"),("go","Go"),("groovy","Groovy"),("hs","Haskell"),("html","HTML"),("java","Java"),("js","JavaScript"),("json","JSON"),("ipynb","Jupyter Notebook"),("kt","Kotlin"),("lua","Lua"),("mk","Makefile"),("md","Markdown"),("m","Objective-C"),("mm","Objective-C++"),("pl","Perl"),("php","PHP"),("PSM1","PowerShell"),("pp","Puppet"),("py","Python"),("qml","QML"),("r","R"),("rb","Ruby"),("rs","Rust"),("scala","Scala"),("sh","Shell"),("dmd","SQL"),("swift","Swift"),("tex","Tex"),("ts","TypeScript"),("vb","VBA"),("vim","VimL"),("xml","XML"),("yml","YML")]

        db = dict(db)
        full_name = db[file_endings]
        return full_name
